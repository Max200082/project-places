{"remainingRequest":"/home/maks/Рабочий стол/web-front/web-front/node_modules/babel-loader/lib/index.js!/home/maks/Рабочий стол/web-front/web-front/src/store/mutations/mutations.js","dependencies":[{"path":"/home/maks/Рабочий стол/web-front/web-front/src/store/mutations/mutations.js","mtime":1633547327604},{"path":"/home/maks/Рабочий стол/web-front/web-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/maks/Рабочий стол/web-front/web-front/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0IHsgbW9ja1Bvc3RzIH0gZnJvbSAiLi4vLi4vdXRpbHMvbW9jay1kYXRhIjsKZXhwb3J0IGRlZmF1bHQgewogIFNBVkVfVVNFUjogZnVuY3Rpb24gU0FWRV9VU0VSKHN0YXRlLCB1c2VyKSB7CiAgICBzdGF0ZS51c2VyID0gdXNlcjsKICB9LAogIFNBVkVfUE9TVFM6IGZ1bmN0aW9uIFNBVkVfUE9TVFMoc3RhdGUsIHBvc3RzKSB7CiAgICAvLyBzdGF0ZS5wb3N0cyA9IHBvc3RzCiAgICAvLyBtb2NrIGRhdGEKICAgIHN0YXRlLnBvc3RzID0gbW9ja1Bvc3RzOwogIH0sCiAgQ0hBTkdFX0xJS0U6IGZ1bmN0aW9uIENIQU5HRV9MSUtFKHN0YXRlLCBvYmopIHsKICAgIC8vINC40LzQuNGC0LDRhtC40Y8g0LjQt9C80LXQvdC10L3QuNGPINC/0L7RgdGC0L7QsgogICAgLy8g0LfQsNCy0LjRgdC40YIg0L7QsSDQsdGN0LrQsAogICAgdmFyIG5ld1Bvc3RzID0gc3RhdGUucG9zdHMubWFwKGZ1bmN0aW9uIChwb3N0KSB7CiAgICAgIGlmIChwb3N0LmlkID09PSBvYmoucG9zdElkKSB7CiAgICAgICAgcG9zdC5pc0xpa2VkID0gb2JqLmlzTGlrZTsKICAgICAgICBvYmouaXNMaWtlID8gcG9zdC5jb3VudExpa2VzKysgOiBwb3N0LmNvdW50TGlrZXMtLTsKICAgICAgfQoKICAgICAgcmV0dXJuIHBvc3Q7CiAgICB9KTsKICAgIHN0YXRlLnBvc3RzID0gbmV3UG9zdHM7CiAgfQp9Ow=="},{"version":3,"sources":["/home/maks/Рабочий стол/web-front/web-front/src/store/mutations/mutations.js"],"names":["mockPosts","SAVE_USER","state","user","SAVE_POSTS","posts","CHANGE_LIKE","obj","newPosts","map","post","id","postId","isLiked","isLike","countLikes"],"mappings":";AAAA,SAAQA,SAAR,QAAwB,uBAAxB;AAEA,eAAe;AACXC,EAAAA,SADW,qBACAC,KADA,EACOC,IADP,EACa;AACpBD,IAAAA,KAAK,CAACC,IAAN,GAAaA,IAAb;AACH,GAHU;AAIXC,EAAAA,UAJW,sBAICF,KAJD,EAIQG,KAJR,EAIe;AACtB;AACA;AACAH,IAAAA,KAAK,CAACG,KAAN,GAAcL,SAAd;AACH,GARU;AASXM,EAAAA,WATW,uBASCJ,KATD,EASQK,GATR,EASa;AACpB;AACA;AACA,QAAMC,QAAQ,GAAGN,KAAK,CAACG,KAAN,CAAYI,GAAZ,CAAgB,UAACC,IAAD,EAAU;AACvC,UAAIA,IAAI,CAACC,EAAL,KAAYJ,GAAG,CAACK,MAApB,EAA4B;AACxBF,QAAAA,IAAI,CAACG,OAAL,GAAeN,GAAG,CAACO,MAAnB;AACAP,QAAAA,GAAG,CAACO,MAAJ,GAAaJ,IAAI,CAACK,UAAL,EAAb,GAAgCL,IAAI,CAACK,UAAL,EAAhC;AACH;;AACD,aAAOL,IAAP;AACH,KANgB,CAAjB;AAOAR,IAAAA,KAAK,CAACG,KAAN,GAAcG,QAAd;AACH;AApBU,CAAf","sourcesContent":["import {mockPosts} from \"../../utils/mock-data\";\n\nexport default {\n    SAVE_USER (state, user) {\n        state.user = user\n    },\n    SAVE_POSTS (state, posts) {\n        // state.posts = posts\n        // mock data\n        state.posts = mockPosts\n    },\n    CHANGE_LIKE(state, obj) {\n        // имитация изменения постов\n        // зависит об бэка\n        const newPosts = state.posts.map((post) => {\n            if (post.id === obj.postId) {\n                post.isLiked = obj.isLike\n                obj.isLike ? post.countLikes++: post.countLikes--\n            }\n            return post\n        })\n        state.posts = newPosts\n    }\n}\n"]}]}